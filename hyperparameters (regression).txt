import numpy as np, tensorflow as tf
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout

# Load regression dataset
x, y = load_diabetes(return_X_y=True)
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

# Hyperparameters for optimization
learning_rate = 0.005
momentum = 0.7
activation = 'relu'

# Model with dropout
model = Sequential([
    Dense(64, activation='relu'), Dropout(0.5),
    Dense(64, activation='relu'), Dropout(0.5),
    Dense(1)  # Regression output (no activation)
])

model.compile(optimizer=tf.keras.optimizers.SGD(learning_rate=learning_rate, momentum=momentum),
              loss='mean_squared_error')

# Train model
model.fit(x_train, y_train, epochs=30, verbose=1)

# Predict
y_pred = model.predict(x_test).flatten()

# Evaluate
print(f"MSE: {mean_squared_error(y_test, y_pred):.4f}")
